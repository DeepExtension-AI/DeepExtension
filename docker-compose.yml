version: '3.8'
services:
  db:
    container_name: ${DB_HOST}
    image: postgres:16.1
    restart: always
    profiles: ["use-db"]
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - ${DB_PORT}:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${db_user:-postgres} -d ${db_name:-postgres}" ]
      interval: 5s
      timeout: 5s
      retries: 10
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    networks:
      - intranet

  migrate:
    image: migrate/migrate:v4.18.3
    profiles: ["use-db"]
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./migrations:/migrations
    command:
      -
      - "-path=/migrations/"
      - "-database=postgres://${DB_USER:-postgres}:${DB_PASS:-postgres}@${DB_HOST}:5432/${DB_NAME:-postgres}?sslmode=disable"
      - "up"
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
  etcd:
    container_name: ${MILVUS_ETCD_NAME}
    image: quay.io/coreos/etcd:v3.5.18
    restart: always
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ./milvus/${ENV}/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://etcd:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: [ "CMD", "etcdctl", "endpoint", "health" ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - intranet

  minio:
    container_name: ${MILVUS_MINIO_NAME}
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    restart: always
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - ${MILVUS_MINIO_PORT_FIRST}
      - ${MILVUS_MINIO_PORT_SECOND}
    volumes:
      - ./milvus/${ENV}/volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":${MILVUS_MINIO_PORT_FIRST}"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${MILVUS_MINIO_PORT_SECOND}/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - intranet

  standalone:
    container_name: ${MILVUS_STANDALONE_NAME}
    image: milvusdb/milvus:v2.5.8
    command: [ "milvus", "run", "standalone" ]
    restart: always
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ./milvus/${ENV}/volumes/milvus:/var/lib/milvus
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${MILVUS_STANDALONE_PORT_SECOND}/healthz" ]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - ${MILVUS_STANDALONE_PORT_FIRST}
      - ${MILVUS_STANDALONE_PORT_SECOND}
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - intranet

  redis:
    image: redis:${AI_REDIS_IMAGE_VERSION}
    restart: always
    container_name: ${AI_REDIS_HOST}
    privileged: true
    ports:
      - ${AI_REDIS_START_PORT}
    environment:
      TZ: Asia/Shanghai
    volumes:
      - ./redis/data-${ENV}:/usr/local/redis/data
      - ./redis/conf-${ENV}/redis.conf:/usr/local/redis/conf/redis.conf
      - ./redis/logs-${ENV}:/usr/local/redis/logs
    command: [ "redis-server", "/usr/local/redis/conf/redis.conf" ]
    networks:
      - intranet
  es:
    container_name: ${AI_ES_HOST}
    image: docker.elastic.co/elasticsearch/elasticsearch:${AI_ES_IMAGE_VERSION}
    restart: always
    env_file:
      - .env
    volumes:
      - ./resources/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    environment:
      xpack.security.enabled: "false" # discovery.type: "single-node"
      ES_JAVA_OPTS: -Xms256m -Xmx256m # -Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-s",
          "-f",
          "http://localhost:9200/_cat/health"
        ]
      interval: 3s
      timeout: 3s
      retries: 10
    ports:
      - ${AI_ES_START_PORT}
    networks:
      - intranet # - 9300:9300

  fb:
    container_name: ${AI_FB_HOST}
    entrypoint: "filebeat -e -strict.perms=false"
    image: docker.elastic.co/beats/filebeat:${AI_FB_IMAGE_VERSION}
    restart: always
    env_file:
      - .env
    depends_on:
      - es
    #        condition: service_healthy
    volumes:
      - ./resources/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ./logs/:/usr/share/filebeat/logs
    networks:
      - intranet

  consul:
    image: hashicorp/consul:${AI_CONSUL_IMAGE_VERSION}
    container_name: ${AI_CONSUL_HOST}
    restart: always
    volumes:
      - ./consul/config-${ENV}:/consul/config
      - ./consul/data-${ENV}:/consul/data
      - ./consul/logs-${ENV}:/consul/logs
    command: consul agent -server -bootstrap-expect=1 -client=0.0.0.0 -ui -bind='{{ GetPrivateIP }}' -data-dir=/consul/data -node=consul-node -datacenter=dc1 -log-level=debug -enable-script-checks=true -config-dir=/consul/config
    ports:
      - ${AI_CONSUL_HTTP_START_PORT}
      - ${AI_CONSUL_HTTP2_START_PORT}/udp
    networks:
      - intranet

  scp-go-ai:
    image: ${SCP_AI_IMAGE_NAME}:${SCP_AI_IMAGE_VERSION}
    container_name: ${AI_SCP_HOST}
    restart: always
    ports:
      - ${SCP_AI_START_PORT}
    env_file:
      - .env
    volumes:
      - ./resources/scp-go:/opt/scpx/resources/
      - ./logs/:/opt/scpx/logs/
      - ./models:/opt/scpx/models
      - ./datasets/${ENV}:/opt/scpx/datasets/${ENV}
      - ./knowledgeBase/${ENV}:/opt/scpx/knowledgeBase/${ENV}
      - ./adminPassword/:/opt/scpx/adminPassword/
    healthcheck:
      test: ["CMD","curl","-f","http://localhost:${SCP_AI_START_PORT}/health"]
      interval: 10s
      timeout: 2s
      retries: 3
    networks:
      - intranet
      - host_access
    extra_hosts:
      - "host.docker.internal:host-gateway"

  comm-cron-ai:
    image: ${CRON_AI_IMAGE_NAME}:${CRON_AI_IMAGE_VERSION}
    container_name: ${AI_CRON_HOST}
    restart: always
    ports:
      - ${CRON_AI_START_HTTP_PORT}
      - ${CRON_AI_START_GRPC_PORT}
    env_file:
      - .env
    volumes:
      - ./resources/comm-cron:/data/conf
    networks:
      - intranet
      - host_access
    extra_hosts:
      - "host.docker.internal:host-gateway"

  deep-e:
    image: ${UI_AI_IMAGE_NAME}:${UI_AI_IMAGE_VERSION}
    container_name: ${AI_UI_HOST}
    restart: always
    ports:
      - ${UI_AI_EXPOSED_PORT}:${UI_AI_START_PORT}
    env_file:
      - .env
    networks:
      - intranet

  training-py:
    image: ${TRAINING_AI_IMAGE_NAME}:${TRAINING_AI_IMAGE_VERSION}
    container_name: ${AI_TRAINING_HOST}
    restart: always
    ports:
      - ${TRAINING_START_PORT}
    env_file:
      - .env
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [ gpu ]  # 启用 GPU 支持
    volumes:
      - ./models:/app/models
      - ./datasets:/app/datasets
      - ./knowledgeBase:/app/knowledgeBase
      - ./logs/:/app/logs/
      - ./deep-e-python:/app/deep-e-python
    profiles: ["gpu"]
    healthcheck:
      test: ["CMD", "nvidia-smi"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    working_dir: /app/deep-e-python
    environment:
      - TRAINING_START_PORT=${TRAINING_START_PORT}
      - FLASK_ENV=production
    command: gunicorn -w 4 -k gevent --timeout 120-b 0.0.0.0:${TRAINING_START_PORT} app:app
    networks:
      - intranet
  redis-py:
    image: redis:${AI_PY_REDIS_IMAGE_VERSION}
    restart: always
    container_name: ${AI_PY_REDIS_HOST}
    privileged: true
    ports:
      - ${AI_PY_REDIS_EXPOSED_PORT}:${AI_PY_REDIS_START_PORT}
    environment:
      TZ: Asia/Shanghai
    volumes:
      - ./redis-py/data-${ENV}:/usr/local/redis/data
      - ./redis-py/conf-${ENV}/redis.conf:/usr/local/redis/conf/redis.conf
      - ./redis-py/logs-${ENV}:/usr/local/redis/logs
    command: [ "redis-server", "/usr/local/redis/conf/redis.conf" ]
    networks:
      - intranet
  deep-e-rag:
    image: ${RAG_IMAGE_NAME}:${RAG_IMAGE_VERSION}
    container_name: ${RAG_HOST}
    restart: always
    ports:
      - ${RAG_START_HTTP_PORT}
      - ${RAG_START_GRPC_PORT}
    env_file:
      - .env
    volumes:
      - ./resources/rag:/data/conf
      - ./knowledgeBase:/data/fileData
    networks:
      - intranet
      - host_access
    extra_hosts:
      - "host.docker.internal:host-gateway"
networks:
  intranet:
    driver: bridge
    name: ${DOCKER_NETWORK_NAME}
  host_access:
    driver: bridge

