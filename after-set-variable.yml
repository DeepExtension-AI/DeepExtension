version: '3.8'
services:
  redis:
    image: redis:${AI_REDIS_IMAGE_VERSION} # 你的redis版本
    restart: always
    container_name: ${AI_REDIS_HOST}
    privileged: true
    ports:
      - ${AI_REDIS_EXPOSED_PORT}:${AI_REDIS_START_PORT}
    environment:
      TZ: Asia/Shanghai
    volumes:
      - ./redis/data-${ENV}:/usr/local/redis/data
      - ./redis/conf-${ENV}/redis.conf:/usr/local/redis/conf/redis.conf
      - ./redis/logs-${ENV}:/usr/local/redis/logs
    command: [ "redis-server", "/usr/local/redis/conf/redis.conf" ]
    networks:
      - intranet
  es:
    container_name: ${AI_ES_HOST}
    image: docker.elastic.co/elasticsearch/elasticsearch:${AI_ES_IMAGE_VERSION}
    restart: always
    env_file:
      - ${ACTUAL_ENV}
    volumes:
      - ./resources/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    environment:
      xpack.security.enabled: "false" # discovery.type: "single-node"
      ES_JAVA_OPTS: -Xms256m -Xmx256m # -Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-s",
          "-f",
          "http://localhost:9200/_cat/health"
        ]
      interval: 3s
      timeout: 3s
      retries: 10
    ports:
      - ${AI_ES_START_PORT}
    networks:
      - intranet # - 9300:9300

  fb:
    container_name: ${AI_FB_HOST}
    entrypoint: "filebeat -e -strict.perms=false"
    image: docker.elastic.co/beats/filebeat:${AI_FB_IMAGE_VERSION}
    restart: always
    env_file:
      - ${ACTUAL_ENV}
    depends_on:
      - es
    #        condition: service_healthy
    volumes:
      - ./resources/filebeat.yml:/usr/share/filebeat/filebeat.yml
      - ./logs/:/usr/share/filebeat/logs
    networks:
      - intranet

  kibana:
    container_name: ${AI_KIBANA_HOST}
    image: docker.elastic.co/kibana/kibana:${AI_KIBANA_IMAGE_VERSION}
    restart: always
    env_file:
      - ${ACTUAL_ENV}
    ## profiles: [ "dbvis" ]
    volumes:
      - ./resources/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    environment:
      ELASTICSEARCH_URL: http://${AI_ES_HOST}:${AI_ES_START_PORT}
    depends_on:
      - es
    #        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-s",
          "-f",
          "http://localhost:5601/api/status"
        ]
      interval: 3s
      timeout: 3s
      retries: 50
    ports:
      - ${AI_KIBANA_EXPOSED_PORT}:${AI_KIBANA_START_PORT}
    networks:
      - intranet

  consul:
    image: hashicorp/consul:${AI_CONSUL_IMAGE_VERSION}
    container_name: ${AI_CONSUL_HOST}
    restart: always
    volumes:
      - ./consul/config-${ENV}:/consul/config
      - ./consul/data-${ENV}:/consul/data
      - ./consul/logs-${ENV}:/consul/logs
    command: consul agent -server -bootstrap-expect=1 -client=0.0.0.0 -ui -bind='{{ GetPrivateIP }}' -data-dir=/consul/data -node=consul-node -datacenter=dc1 -log-level=debug -enable-script-checks=true -config-dir=/consul/config
    ports:
      - ${AI_CONSUL_HTTP_EXPOSED_PORT}:${AI_CONSUL_HTTP_START_PORT}
      - ${AI_CONSUL_HTTP2_START_PORT}/udp
    networks:
      - intranet

  scp-go-ai:
    image: ${SCP_AI_IMAGE_NAME}:${SCP_AI_IMAGE_VERSION}
    container_name: ${AI_SCP_HOST}
    restart: always
    ports:
      - ${SCP_AI_EXPOSED_PORT}:${SCP_AI_START_PORT}
    env_file:
      - ${ACTUAL_ENV}
    volumes:
      - ./resources/scp-go:/opt/scpx/resources/
      - ./logs/:/opt/scpx/logs/
      - ./training-data/:/opt/scpx/training-data/
    networks:
      - intranet

  comm-cron-ai:
    image: ${CRON_AI_IMAGE_NAME}:${CRON_AI_IMAGE_VERSION}
    container_name: ${AI_CRON_HOST}
    restart: always
    ports:
      - ${CRON_AI_EXPOSED_HTTP_PORT}:${CRON_AI_START_HTTP_PORT}
      - ${CRON_AI_EXPOSED_GRPC_PORT}:${CRON_AI_START_GRPC_PORT}
    env_file:
      - ${ACTUAL_ENV}
    volumes:
      - ./resources/comm-cron:/data/conf
    networks:
      - intranet

  deep-e:
    image: ${UI_AI_IMAGE_NAME}:${UI_AI_IMAGE_VERSION}
    container_name: ${AI_UI_HOST}
    restart: always
    ports:
      - ${UI_AI_EXPOSED_PORT}:${UI_AI_START_PORT}
    env_file:
      - ${ACTUAL_ENV}
    networks:
      - intranet
  training-py:
    image: ${TRAINING_AI_IMAGE_NAME}:${TRAINING_AI_IMAGE_VERSION}
    container_name: ${AI_TRAINING_HOST}
    ports:
      - ${TRAINING_EXPOSED_PORT}:${TRAINING_START_PORT}
    env_file:
      - ${ACTUAL_ENV}
    deploy:
      resources:
        reservations:
          devices:
            - capabilities: [ gpu ]  # 启用 GPU 支持
    command: nvidia-smi  # 运行 nvidia-smi 命令
    volumes:
      - ./models:/app/models
      - ./datasets:/app/datasets
      - ./training-data/:/app/training-data/
    networks:
      - intranet
networks:
  intranet:
    driver: bridge
    name: ${DOCKER_NETWORK_NAME}

# build ui-js
#scp-ui $ docker build -t ui-js-i:1.0 .

# build appl-go
#scp-go $ docker build -t appl-go-i:1.0 .

# load image engine-cpp
#anywhere $ docker load -i <path to image tar file>, e.g., engine-cpp-i-20231208.tar.gz (Nextcloud, Onboarding_Files)


# build scp-int
#scp-int $ docker build -t scp-data:1.0 .

# build scp-inbound
#scp-inbound $ docker build -t scp-inbound:1.0 .

# start the full solution
#currentdir $ docker-compose --profile dev up -d
