# github.com/flipped-aurora/gin-vue-admin/server Global Configuration

# jwt configuration
jwt:
  signing-key: qmPlus
  expires-time: "${SCP_GO_AI_TOKEN_EXPIRE_TIME}"
  buffer-time: "${SCP_GO_AI_TOKEN_BUFFER_TIME}"
  issuer: qmPlus
# zap logger configuration
zap:
  level: info
  format: console
  prefix: "[github.com/flipped-aurora/gin-vue-admin/server]"
  director: log
  show-line: true
  encode-level: LowercaseColorLevelEncoder
  stacktrace-key: stacktrace
  log-in-console: true

# redis configuration
redis:
  db: 0
  addr: ${SCP_GO_AI_REDIS_HOST}:${SCP_GO_AI_REDIS_PORT}
  password: ${SCP_GO_AI_REDIS_PASSWORD}

# system configuration
system:
  env: local  # Change to "develop" to skip authentication for development mode
  addr: "${SCP_GO_AI_START_PORT}"
  eng-addr: ""
  db-type: pgsql
  oss-type: local # 控制oss选择走本地还是 七牛等其他仓 自行增加其他oss仓可以在 server/utils/upload/upload.go 中 NewOss函数配置
  use-redis: true # 使用redis
  use-mongo: false # 使用mongo
  use-multipoint: false
  # IP限制次数 一个小时15000次
  iplimit-count: 15000
  #  IP限制一个小时
  iplimit-time: 3600
  # 最多登录节点数（1为限制单设备登录）
  point-count: 3
  login-log: true
  # 钉钉SSO
  ding-app-key: "dingpu9euvphfxqsuin4"
  ding-app-secret:  "yqv9_9hSz6a_JADthcFj0Pts-BHZ0a838Fsw325T4uGriFHsJ27XCQcHB5kUamPU"
  ding-redirect-url:  "http://cloud.scmify.com/login/DingTalk"
  ding-auth-url:  "https://login.dingtalk.com/oauth2/auth"
  ding-talk-scope:  "openid"
  use-ding-talk: true
  ewchat-auth-url: "https://login.work.weixin.qq.com/wwlogin/sso/login"
  ewchat-redirect-url: "http://www.weiyi1.xin:80/EnterpriseWeChatLogin"
  ewchat-app-id: "ww85d1e5087839394c"
  ewchat-app-secret: "AdxcQvZ45GkM9w3ivFfbIjGoOHokTycbhFjDlb6uv4I"
  ewchat-agent-id: "1000002"

# captcha configuration
captcha:
  key-long: 4
  img-width: 240
  img-height: 80
  open-captcha: 0 # 0代表一直开启，大于0代表限制次数
  open-captcha-timeout: 3600 # open-captcha大于0时才生效

# pgsql connect configuration
# 未初始化之前请勿手动修改数据库信息！！！如果一定要手动初始化请看（https://gin-vue-admin.com/docs/first_master）
pgsql:
  prefix: ""
  port: ${SCP_GO_AI_DB_PORT}
  config: sslmode=disable TimeZone=Asia/Shanghai
  db-name: ${SCP_GO_AI_DB_DB_NAME}
  username: ${SCP_GO_AI_DB_USERNAME}
  password: ${SCP_GO_AI_DB_PASSWORD}
  path: ${SCP_GO_AI_DB_HOST}
  engine: ""
  log-mode: error
  max-idle-conns: 10
  max-open-conns: 100
  singular: false
  log-zap: false

db-list:
  - disable: true # 是否禁用
    type: "" # 数据库的类型,目前支持mysql、pgsql
    alias-name: "" # 数据库的名称,注意: alias-name 需要在db-list中唯一
    path: ""
    port: ""
    config: ""
    db-name: ""
    username: ""
    password: ""
    max-idle-conns: 10
    max-open-conns: 100
    log-mode: ""
    log-zap: false

# local configuration
local:
  path: uploads/file
  store-path: uploads/file

# timer task db clear table
Timer:
  start: true
  spec: "@daily" # 定时任务详细配置参考https://pkg.go.dev/github.com/robfig/cron/v3
  detail:
    - tableName: sys_operation_records
      compareField: created_at
      interval: 2160h
    - tableName: jwt_blacklists
      compareField: created_at
      interval: 168h

# 跨域配置
# 需要配合 server/initialize/router.go -> `Router.Use(middleware.CorsByRules())` 使用
cors:
  mode: whitelist # 放行模式: allow-all, 放行全部; whitelist, 白名单模式, 来自白名单内域名的请求添加 cors 头; strict-whitelist 严格白名单模式, 白名单外的请求一律拒绝
  whitelist:
    - allow-origin: example1.com
      allow-headers: content-type
      allow-methods: GET, POST
      expose-headers: Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Content-Type
      allow-credentials: true # 布尔值
    - allow-origin: example2.com
      allow-headers: content-type
      allow-methods: GET, POST
      expose-headers: Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Content-Type
      allow-credentials: true # 布尔值

elasticsearch:
  path: ${SCP_GO_AI_ES_HOST}
  port: ${SCP_GO_AI_ES_PORT}

comm-cron:
  host: "${SCP_GO_AI_CRON_HOST}"
  port: "${SCP_GO_AI_CRON_HTTP_PORT}"

training:
  host: "${SCP_GO_AI_HOST}"
  port: "${SCP_GO_AI_PORT}"

request-timeout:
  num: "${SCP_GO_REQ_TIMEOUT_NUM}"
  unit: "${SCP_GO_REQ_TIMEOUT_UNIT}"